name: Go
on:
  create:
    tags:
      - v*
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - os: linux_386
            artifact_name: tinkoff_exporter_linux_386
            asset_name: tinkoff_exporter_linux_386
          - os: linux_adm64
            artifact_name: tinkoff_exporter_linux_adm64
            asset_name: tinkoff_exporter_linux_amd64
          - os: linux_arm
            artifact_name: tinkoff_exporter_linux_arm
            asset_name: tinkoff_exporter_linux_arm
          - os: windows
            artifact_name: tinkoff_exporter_windows_amd64.exe
            asset_name: tinkoff_exporter_windows.exe
    steps:
      - name: Set up Go 1.13
        uses: actions/setup-go@v1
        with:
          go-version: 1.13
        id: go

      - name: Check out code into the Go module directory
        uses: actions/checkout@v1

      - name: Get TAG env
        run: |
          echo ${{ github.ref }} > ref.txt 
          tag=`sed -E "s/.*v(.*)/\1/g" ref.txt`
          echo "::set-env name=tag::$tag"

      - name: GolangCI-Lint
        uses: Mushus/golangci-linter@v1.1.2

      - name: Build
        run: |
          go build -v .
          go get github.com/mitchellh/gox
          gox -osarch="linux/amd64 linux/386 linux/arm darwin/amd64 windows/amd64" --output "build/{{ .Dir }}_{{.OS}}_{{.Arch}}"

      - name: Docker
        uses: elgohr/Publish-Docker-Github-Action@master
        with:
          name: maksim77/tinkoff_exporter
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          tags: "latest,${{ env.tag }}"

      - name: Create Release
        id: create_release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build/${{ matrix.artifact_name }}
          asset_name: ${{ matrix.asset_name }}
          asset_content_type: application/octet-stream
